import numpy as np
import matplotlib.pyplot as plt

# Generate probabilities that sum to 1.0
np.random.seed(42)
probs = [
    # Dim 1: Normal stats /filtered stats /// Dim 2. Normal round / gt Round // Dim 3. Left in partner in, right in
    [
        [
            [0.0515641947647618, 0.2585213756825497, 0.12189109677504305, 0.14983555087283362, 0.0849236783465362,
             0.10526367703451715, 0.06692431695652962, 0.07228440858154515, 0.044438814414433904, 0.028001931348485193,
             0.009651887014937972, 0.0034563355119590065, 0.0004544688239112887, 7.333669254103058e-5,
             1.8375320686378774e-5, 1.99741969585141e-5, 0.0026765776617704217],
            [0.03552395057873443, 0.003151338106606016, 0.003281140995728414, 0.006371545457345626,
             0.009569145167854969, 0.01338120713747773, 0.020531052646057934, 0.030747295959286967, 0.04221341377248508,
             0.06636741424321306, 0.09923664238804399, 0.12800999626850493, 0.16042074664230105, 0.21228819885882558,
             0.05205004153551374, 0.09685163627351788, 0.02000523396850261],
            [0.04864941980777275, 0.18670188740290058, 0.21487001958858562, 0.10890301334097659, 0.12819774666604905,
             0.07740408094358153, 0.0892625465349412, 0.054179874050872955, 0.054537916527842664, 0.021968489440480302,
             0.010331456456368194, 0.003360544012949017, 0.0003923830474910927, 5.8112098626212586e-5,
             1.6670636425646258e-5, 1.7893306516102684e-5, 0.0011479461376204536]
        ],
        [
            [0.15560771308876012, 0.264795432306662, 0.11306391119900042, 0.1408002036511932, 0.07073099663243361,
             0.09167433024990036, 0.05123538433147441, 0.05743235532365594, 0.0297226733669597, 0.017713237889421456,
             0.004664337883711055, 0.0014764075965145698, 0.00019095287536031563, 0.00014266727404691244,
             3.234835710539906e-5, 3.255977104498912e-5, 0.0006844882027555419],
            [0.0014469806344803112, 0.0006053943008994099, 0.000485454972542923, 0.0007196825327353573,
             0.001158197191587877, 0.0015689043976774178, 0.0024335707651873236, 0.003758941259351135,
             0.0061115529785747335, 0.01308144921171631, 0.02903238468900516, 0.06579463272885776, 0.16023752545025244,
             0.4485782360906668, 0.1269689906792563, 0.13399577855847822, 0.004022323558730499],
            [0.15588773655895916, 0.17529225417930402, 0.20764985514023784, 0.09618619274730078, 0.11706195887825978,
             0.06446972878852462, 0.07664311898343057, 0.04184126702850906, 0.0428600711720844, 0.013922731126677431,
             0.005725618603088888, 0.0015406705569877858, 0.00018529714089196103, 0.00012621326421143213,
             3.253217382329544e-5, 3.977134535208723e-5, 0.000534982312356848]
        ]
    ],
    [
        [
            [0.031784993551702376, 0.31280043204841335, 0.07531100251695641, 0.1735178269860632, 0.05996729702829518,
             0.12134211898294008, 0.05452366163524837, 0.08351418500752093, 0.04003432440050788, 0.030921894527303612,
             0.011091196639401718, 0.003945684629603299, 0.000463978088260606, 6.548077858516618e-5,
             1.496703510518084e-5, 1.6214288030612576e-5, 0.0006847418560620233],
            [0.048642864091837726, 0.008449514943337299, 0.006617300395878078, 0.01138804283565447,
             0.015430389566978729, 0.01931059341799686, 0.026343852664506423, 0.03639920574933708, 0.04510690204823876,
             0.06595161656451665, 0.0818266517994118, 0.09808209917656362, 0.13246886233071659, 0.22473502111599203,
             0.05837143691020527, 0.09096277947819927, 0.02991286691062934],
            [0.03496424125862787, 0.10237202561358608, 0.24424143324328168, 0.08212162711627641, 0.15854143748394162,
             0.07428638423871423, 0.11956228905834898, 0.061029332894300306, 0.0755149283702645, 0.027177017618694826,
             0.014751883975543865, 0.004587396259737927, 0.0004895467732319566, 5.799726103257575e-5,
             1.060164986616976e-5, 1.559066156789671e-5, 0.0002762665229831297],
        ],
        [
            [0.12387901583379557, 0.2860093374396848, 0.06733501197435604, 0.1622322891383136, 0.05571634300888895,
             0.11414389100626747, 0.049289330013995616, 0.07660146971960066, 0.032583696065163946, 0.02432056552407244,
             0.005890771580539374, 0.0015231862880852158, 0.00013300716298260705, 0.00011551151259394345,
             3.632495278947527e-5, 1.8740908726897896e-5, 0.00017150787014334686],
            [0.0010122837103247052, 0.0008534142106054954, 0.00046305885695956497, 0.0008016880065654988,
             0.0012099896730926212, 0.0016163946043949353, 0.002549856806966489, 0.004258122051109654,
             0.007062665107901788, 0.015883652381202, 0.0309199846689076, 0.06642361441455093, 0.14767400206647185,
             0.4643463430379059, 0.12219143866641943, 0.13051106974256735, 0.002222421994054217],
            [0.1245713189040506, 0.09771306442360989, 0.2338704103407563, 0.07710489871199588, 0.1473695291028578,
             0.06721507520756123, 0.10751874267758413, 0.05214872631232581, 0.06266687468510838, 0.019060523666257805,
             0.008361788989698695, 0.0019936090107418114, 0.00017066576778423037, 0.00010469532184541576,
             1.3877545639218642e-5, 3.190895230387381e-5, 8.429037987890608e-5],
        ]
    ]
]

for db in probs:
    for round_type in db:
        for prob_array in round_type:
            assert np.isclose(sum(prob_array), 1.)
# Labels for x-axis
labels = ['Dog'] + [str(i) for i in range(2, 11)] + ['J', 'Q', 'K', 'A', 'Ph', 'Dr', 'Ma']

db_type = ["Normal", "Filtered"]
round_types = ["Normal", "GT_Call"]
card_origin = ["Links", "Partner", "Rechts"]

bar_width = 0.45

for j, round_type in enumerate(probs[0]):  # for each round type
    for k, prob_array in enumerate(round_type):  # for each card origin
        # Create figure
        plt.figure(figsize=(15, 6))

        # Position of bars
        x = np.arange(len(labels))

        # Create bars for normal and filtered data
        plt.bar(x - bar_width/2, probs[0][j][k], bar_width, label='Normal', color='skyblue')
        plt.bar(x + bar_width/2, probs[1][j][k], bar_width, label='Filtered', color='lightcoral')

        # Customize plot
        plt.xlabel('Karte')
        plt.ylabel('Wahrscheinlichkeit')
        plt.title(f'Wahrscheinlichkeitsverteilung f√ºr Schupfkarte von {card_origin[k]} ({round_types[j]})')
        plt.xticks(x, labels, rotation=45)
        plt.legend()

        # Add value labels
        for i, v in enumerate(probs[0][j][k]):
            plt.text(i - bar_width/2, v, f'{v:.3f}', ha='center', va='bottom', rotation=90)
        for i, v in enumerate(probs[1][j][k]):
            plt.text(i + bar_width/2, v, f'{v:.3f}', ha='center', va='bottom', rotation=90)

        plt.tight_layout()
        plt.savefig(f"Compare_{round_types[j]}_{card_origin[k]}.png")
        plt.close()